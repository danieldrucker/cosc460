package simpledb;

/**
 * A class to represent a fixed-width histogram over a single integer-based field.
 */
public class IntHistogram {

    /**
     * Create a new IntHistogram.
     * <p/>
     * This IntHistogram should maintain a histogram of integer values that it receives.
     * It should split the histogram into "buckets" buckets.
     * <p/>
     * The values that are being histogrammed will be provided one-at-a-time through the "addValue()" function.
     * <p/>
     * Your implementation should use space and have execution time that are both
     * constant with respect to the number of values being histogrammed.  For example, you shouldn't
     * simply store every value that you see in a sorted list.
     *
     * @param buckets The number of buckets to split the input value into.
     * @param min     The minimum integer value that will ever be passed to this class for histogramming
     * @param max     The maximum integer value that will ever be passed to this class for histogramming
     */
	
	private int low;
	private int high;
	private int[] bucks;
	private int width;
	private int total;
	
    public IntHistogram(int buckets, int min, int max) {
    	this.low = min;
    	this.high = max;
    	this.bucks = new int[buckets];
    	this.width = (int)Math.floor((max-min+1)/buckets);
    	this.total = 0;
    }

    /**
     * Add a value to the set of values that you are keeping a histogram of.
     *
     * @param v Value to add to the histogram
     */
    public void addValue(int v) {
    	int bucket = findBucket(v);
    	if (bucket < 0) {
    		throw new RuntimeException("Outside of designated Range");
    	}
    	else {
    		this.bucks[bucket]++;
    		this.total++;
    	}
    }
    
    public int findBucket(int v) {
    	if (v < this.low) {
    		return -1;
    	}
    	if (v > this.high) {
    		return -2;
    	}
    	int num = v - this.low;
    	if (num == 0) {
    		return 0;
    	}
    	
    	int len = this.bucks.length;
    	int x = (num/this.width);
    	if (x >= len) {
    		return len-1;
    	} else {
    		return x;
    	}
    }

    /**
     * Estimate the selectivity of a particular predicate and operand on this table.
     * <p/>
     * For example, if "op" is "GREATER_THAN" and "v" is 5,
     * return your estimate of the fraction of elements that are greater than 5.
     *
     * @param op Operator
     * @param v  Value
     * @return Predicted selectivity of this particular operator and value
     */
    public double estimateSelectivity(Predicate.Op op, int v) {
    	int vBucket = findBucket(v);
    	if (vBucket < 0) {
    		double eqFraction = 0;
    		if (vBucket == -1) {
    			double gtrFraction = 1.0;
    			double lessFraction = 0;
    		} else {
    			double gtrFraction = 0;
    			double lessFraction = 1.0;
    		}
    	} else {
    		int len = this.bucks.length;
    		int width_last = this.width + ((this.high-this.low+1) % len);
    		if (vBucket == (len - 1)) {
    			double eqFraction = (this.bucks[vBucket] / width_last) / this.total;
    			//add gtrFraction and lessFraction computation here for last bucket
    		} else {
    			double eqFraction = (this.bucks[vBucket] / this.width) / this.total;
    			//add gtrFraction and lessFraction computation here for normal buckets
    		}
    	}
    	
    	
    	
    	
    	
    	
    	
    	String pred = op.toString();
    	switch (pred) {
        case 1:  pred = "January";
                 break;
        case 2:  pred = "February";
                 break;
        case 3:  monthString = "March";
                 break;
        case 4:  monthString = "April";
                 break;
        case 5:  monthString = "May";
                 break;
        case 6:  monthString = "June";
                 break;
        return -1.0;
    }

    /**
     * @return A string describing this histogram, for debugging purposes
     */
    public String toString() {
        // some code goes here
        return null;
    }
}
