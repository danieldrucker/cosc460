package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    
    private JoinPredicate pred;
    private DbIterator[] childrenOp;
    
    private Tuple t1 = null;
    private Tuple t2 = null;
    
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.pred = p;
        this.childrenOp = new DbIterator[]{child1, child2};

    }

    public JoinPredicate getJoinPredicate() {
        return this.pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        TupleDesc td = this.childrenOp[0].getTupleDesc();
        return td.getFieldName(this.pred.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        TupleDesc td = this.childrenOp[1].getTupleDesc();
        return td.getFieldName(this.pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td1 = this.childrenOp[0].getTupleDesc();
        TupleDesc td2 = this.childrenOp[1].getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.childrenOp[0].open();
        this.childrenOp[1].open();
        super.open();
    }

    public void close() {
        this.childrenOp[0].close();
        this.childrenOp[1].close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.childrenOp[0].rewind();
        this.childrenOp[1].rewind();
        this.t1 = null;
        this.t2 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (this.t1 == null) {
            if (this.childrenOp[0].hasNext()) {
                this.t1 = this.childrenOp[0].next();
            }
        }
        while (this.t1 != null) {
            while (this.childrenOp[1].hasNext()) {
                this.t2 = this.childrenOp[1].next();
                if (this.pred.filter(this.t1, this.t2)) {
                    Tuple newTup = new Tuple(getTupleDesc());
                    int numfields1 = this.t1.getTupleDesc().numFields();
                    for (int i = 0; i < numfields1; i++) {
                        newTup.setField(i, t1.getField(i));
                    }
                    int numfields2 = numfields1 + this.t2.getTupleDesc().numFields();
                    int k = 0;
                    for (int j = numfields1; j < numfields2; j++) {
                        newTup.setField(j, t2.getField(k));
                        k++;
                    }
                    return newTup;
                }
            }
            this.childrenOp[1].rewind();
            if (this.childrenOp[0].hasNext()) {
                this.t1 = this.childrenOp[0].next();
            }
            else {
                this.t1 = null;
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return this.childrenOp;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.childrenOp[0] = children[0];
        this.childrenOp[1] = children[1];
    }

}
